<#
.SYNOPSIS
    Find where a service account is used across all servers in the domain.
.DESCRIPTION
    - Scans domain servers for:
      * Windows Services
      * Scheduled Tasks
      * IIS App Pools
      * Security Event Log (last 7 days)
    - Consolidates into a CSV report.
.PARAMETER ServiceAccount
    The service account to check (e.g. "DOMAIN\ServiceAccount").
#>

param(
    [Parameter(Mandatory=$true)]
    [string]$ServiceAccount
)

# Normalize
$accountPattern = "*$ServiceAccount*"

# Get all Windows servers in the domain
Write-Host "=== Enumerating domain servers... ==="
Import-Module ActiveDirectory
$servers = Get-ADComputer -Filter {OperatingSystem -like "*Server*"} | Select-Object -Expand Name

Write-Host "Found $($servers.Count) servers.`n"

$results = @()

foreach ($server in $servers) {
    Write-Host ">>> Scanning $server ..." -ForegroundColor Cyan

    try {
        # Run remote query
        Invoke-Command -ComputerName $server -ScriptBlock {
            param($accountPattern)

            $localResults = @()

            # Services
            $services = Get-WmiObject Win32_Service | Where-Object { $_.StartName -like $accountPattern }
            foreach ($svc in $services) {
                $localResults += [PSCustomObject]@{
                    Server = $env:COMPUTERNAME
                    Type   = "Service"
                    Name   = $svc.Name
                    Detail = $svc.DisplayName
                    User   = $svc.StartName
                }
            }

            # Scheduled Tasks
            $tasks = Get-ScheduledTask | Where-Object { $_.Principal.UserId -like $accountPattern }
            foreach ($task in $tasks) {
                $localResults += [PSCustomObject]@{
                    Server = $env:COMPUTERNAME
                    Type   = "Scheduled Task"
                    Name   = $task.TaskName
                    Detail = $task.TaskPath
                    User   = $task.Principal.UserId
                }
            }

            # IIS App Pools
            Import-Module WebAdministration -ErrorAction SilentlyContinue
            $appPools = Get-ItemProperty IIS:\AppPools\* -ErrorAction SilentlyContinue | Where-Object { $_.processModel.userName -like $accountPattern }
            foreach ($pool in $appPools) {
                $localResults += [PSCustomObject]@{
                    Server = $env:COMPUTERNAME
                    Type   = "IIS AppPool"
                    Name   = $pool.name
                    Detail = "AppPool"
                    User   = $pool.processModel.userName
                }
            }

            # Security Events (last 7 days, ID 4624)
            $events = Get-WinEvent -FilterHashtable @{LogName="Security";Id=4624;StartTime=(Get-Date).AddDays(-7)} -ErrorAction SilentlyContinue |
                Where-Object { $_.Properties[5].Value -like $accountPattern }

            foreach ($event in $events) {
                $localResults += [PSCustomObject]@{
                    Server = $env:COMPUTERNAME
                    Type   = "Event Log"
                    Name   = "4624 Logon"
                    Detail = $event.TimeCreated
                    User   = $event.Properties[5].Value
                }
            }

            return $localResults

        } -ArgumentList $accountPattern -ErrorAction Stop | ForEach-Object { $results += $_ }

    } catch {
        Write-Warning "Failed to scan $server: $_"
    }
}

# Save report
$csvPath = "$env:USERPROFILE\Domain_ServiceAccount_Usage_Report.csv"
$results | Sort-Object Server, Type, Name | Export-Csv -NoTypeInformation -Path $csvPath

Write-Host "`nâœ… Enterprise report generated: $csvPath"
Write-Host "Open the CSV file to see all usages of $ServiceAccount across servers."